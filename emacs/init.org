#+PROPERTY: header-args :tangle init.el :comments org


*  My Emacs configure


** Resources

This config is mostly based on:
- [[https://github.com/syl20bnr/spacemacs][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
- [[https://github.com/alhassy/emacs.d][alhassy's emacs.d]]
  - Lots of interesting org configuration still to review.
- [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]
- [[https://www.sandeepnambiar.com/my-minimal-emacs-setup/][My Minimal Emacs Setup]]
- [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][How to build your own spacemacs]]
- [[https://github.com/MatthewZMD/.emacs][M-EMACS]]
- [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organizing Notes With Refile]]

*** Further Resources
- [[http://emacsrocks.com/][Emacs Rocks]]
- [[https://emacscast.org][EmacsCast]]
- [[https://github.com/emacs-tw/awesome-emacs#noteworthy-configurations][Awesome Emacs]]
- [[https://www.youtube.com/channel/UCe6ABcJkH_Gso9HJOt4x9fg][Jack of Some]]
- [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
- [[https://m00natic.github.io/emacs/emacs-wiki.html][Andrey's Opinionated Emacs Guide]]
- [[https://david.rothlis.net/emacs/howtolearn.html][How to learn Emacs]]
- [[http://ergoemacs.org/emacs/effective_emacs.html][Effective Emacs]]

** ~init.el~
To create the ~init.el~ file run ~org-babel-tangle (C-c C-v t)~.

** Install
#+BEGIN_SRC bash :tangle no
cd ~
git clone https://github.com/plexus/chemacs.git
cd chemacs
./install.sh
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs-profiles.el
(("default" . ((user-emacs-directory . "~/dotfiles/emacs"))))
#+END_SRC

#+BEGIN_SRC bash :tangle ~/.emacs-profile
default
#+END_SRC

** Notes


*** use-package
- ~:diminish~ is the text that will be displayed in the modeline. To
  not clutter it we often set is as the empty string.
- ~:defer n~ is loaded after ~n~ seconds if not loaded yet. However,
  ~use-package~ is naturally lazy.

*** straight.el
- is a package manager that clones each package as a git repository and builds it locally
- this seems to be a good thing as MELP stable is not ideal
  - https://www.reddit.com/r/emacs/comments/etikbz/speaking_as_a_package_maintainer_please_do_not/
  - https://github.com/melpa/melpa/issues/6656
- plugs into use-package
- ~straight-freeze-versions~ writes the current package versions to ~straight/versions/default.el~
- to update ~straight-fetch-package-and-deps~
  
** General Emacs Setup
*** Enable Debugging
Run with debugging enabled during ~init.el~. We disable it at the end.

#+BEGIN_SRC emacs-lisp
;; only debug during init; disabled at end.
(setq debug-on-error t)
(setq debug-on-quit t)

;; show messages buffer
(with-current-buffer (messages-buffer)
  (goto-char (point-max))
  (switch-to-buffer (current-buffer)))
#+END_SRC

*** straight.el

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Load ~use-package~

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC

*** Garbage Collector
From https://github.com/MatthewZMD/.emacs.d:
- Defer garbage collection further back in the startup process,
  according to hlissner.
  - The GC eats up quite a bit of time, easily doubling startup
    time. The trick is to turn up the memory threshold as early as
    possible.
[[https://www.reddit.com/r/emacs/comments/eewwyh/officially_introducing_memacs/][However]] (user /u/eli-zaretskii):
- The threshold should be determined by each user, by starting from
  the default and doubling the value until they feel Emacs is fast
  enough. There's no single value that will satisfy everyone.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000)
#+END_SRC
*** Fixes
Fix small things that cause warnings and errors. Especially on Mac OS.

#+BEGIN_SRC emacs-lisp
;; disable warnings for evil and magit
(setq ad-redefinition-action 'accept)
#+END_SRC

Ensure that on OS X the correct paths from the shell config are loaded.

#+BEGIN_SRC emacs-lisp
;; fix shell
;;(setq exec-path-from-shell-arguments '("-l"))
(use-package exec-path-from-shell
 :config (when (memq window-system '(mac ns x))
 (exec-path-from-shell-initialize)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; fix tramp with zsh
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC

*** Tools
Load tools that are required for other parts of the config.

Package used for hiding modeline info. This is what is called by
~:diminish~.
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

String, file and list libraries.
#+BEGIN_SRC emacs-lisp
(use-package s)
(use-package f)
(use-package dash)
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (use-package hydra)
#+END_SRC

Nice icons. *You need to run* ~M-x all-the-icons-install-fonts~. The
script checks if the font is installed and else runs the command.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
    :init
    (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t))) ;; see https://github.com/domtronn/all-the-icons.el/issues/120
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

*** TODO Auto-Update
needs to be set up with straight 
#+BEGIN_SRC emacs-lisp
;; (use-package auto-package-update
;;   :config
;;   ;; Delete residual old versions
;;   (setq auto-package-update-delete-old-versions t)
;;   ;; Do not bother me when updates have taken place.
;;   (setq auto-package-update-hide-results t)
;;   ;; Update installed packages at startup if there is an update pending.
;;   (auto-package-update-maybe))
#+END_SRC

*** Personal Setup
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Marc Fischer")
(setq user-mail-address "mail@marcfischer.at")
#+END_SRC
*** Backup
#+BEGIN_SRC emacs-lisp
;; disable auto-save files & backups
(setq auto-save-default nil
      auto-save-list-file-prefix nil
      make-backup-files nil)
;; but in case soemthing goes wrong still place them in the .emacs.d
(defvar backup-dir (expand-file-name "~/.emacs.d/emacs_backup/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
#+END_SRC



*** modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :hook (after-init . doom-modeline-mode)
      :custom
      (inhibit-compacting-font-caches t)
      (doom-modeline-minor-modes t)
      (doom-modeline-icon t)
      (doom-modeline-major-mode-color-icon t)
      (doom-modeline-height 15))
#+END_SRC


*** Text width (Fill-mode)
~M-q~ (~fill-paragraph~) justifies paragraphs and automatically breaks
them. Here we set the set standard text width.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 70) ;; 70 fits nicly on half a 13'' macbook
;; auto-fill does interfers too often
;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
;; Theme
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-solarized-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

  ;; set font
  (set-face-attribute 'default nil :family "Ubuntu Mono" :height 150)

)

;; show linenumbers
(global-linum-mode t)
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

;; show the matching parenthesis when the cursor is above one of them.
(setq show-paren-delay 0)
(setq show-paren-style 'mixed)
(show-paren-mode t)
(use-package smartparens
 :diminish
 :config
 (progn
   (require 'smartparens-config)
   (smartparens-global-mode 1)
   (show-paren-mode t)))

;; highlight the current line
(global-hl-line-mode t)

;; Don't clutter startup
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;; disable toolbars
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

; display a small wave after the cursor when jumping around
(use-package beacon
   :config (beacon-mode +1))

;; disable bell sound
(setq ring-bell-function 'ignore
;;       visible-bell 1 ;; we already have the doom-theme bell setup
)

;; nice scrolling
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Counsel, Swiper and Ivy
Setup the ivy auto-complete package along with swiper
(ivy-text-search) and counsel (ivy-M-x).
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :config
  (setq ivy-use-virtual-buffers t) :init (ivy-mode 1))

(use-package counsel
  :after ivy)

(use-package swiper
  :after counsel
  :bind
  ("M-x" . counsel-M-x)
  ("\C-s" . swiper)
  ("M-s" . swiper-all)
  ("C-c C-r" . ivy-resume)
  ("C-c p" . counsel-git)
  ("C-c r" . counsel-rg)
  ("C-x C-f" . counsel-find-file)
  (("M-y" . counsel-yank-pop)
  :map ivy-minibuffer-map
  ("M-y" . ivy-next-line)) ;; multiple pressed cycles through choices; taken from http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/
)
#+END_SRC

*** Search
#+BEGIN_SRC emacs-lisp
(use-package ripgrep
  :bind
  ("C-c C-r" . ripgrep-regexp))
(use-package ag) ;; currently not used but frequently experimented with
#+END_SRC

*** Buffers

#+BEGIN_SRC emacs-lisp
;; use ibuffer by default
(defalias 'list-buffers 'ibuffer)
#+END_SRC

*** Indentation
#+BEGIN_SRC emacs-lisp
;; Always stay indented: Automatically have blocks reindented after every change.
(use-package aggressive-indent
  :config (global-aggressive-indent-mode t))

;; spaces instead of tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;; Make tab key do indent first then completion.
(setq-default tab-always-indent 'complete)
#+END_SRC

*** Parenthesis and Whitespace
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :init
  :diminish
  :bind
  ("<f11>" . whitespace-mode)
  ("C-c w" . delete-trailing-whitespace))
#+END_SRC

*** comments
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-;") 'comment-region)
(global-set-key (kbd "C-M-;") 'uncomment-region)
#+END_SRC
*** UTF-8

#+BEGIN_SRC emacs-lisp
;; make sure that UTF-8 is used everywhere.
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-language-environment    'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(prefer-coding-system        'utf-8)
(set-input-method nil)

;;fancy uft-8
(global-prettify-symbols-mode 1)
#+END_SRC

*** Help & Documentation
Display possible keys after a partial commands is entered.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :config (which-key-mode)
          (setq which-key-idle-delay 0.05))
#+END_SRC

My own cheatsheet. Based on [[https://github.com/darksmile/cheatsheet/blob/master/cheatsheet.el][cheatsheet.el]].
#+BEGIN_SRC emacs-lisp
(defun cheatsheet-show ()
  "Create buffer and show cheatsheet."
  (interactive)
  ;;(switch-to-buffer-other-window "*cheatsheet*")
  ;;(erase-buffer)
  (find-file (concat user-emacs-directory "CheatSheet.pdf"))
  (rename-buffer "*cheatsheet*")
  (setq buffer-read-only t))

(defun cheatsheet-toggle()
  (interactive)
  (if (get-buffer "*cheatsheet*")
    (kill-buffer "*cheatsheet*")
    (cheatsheet-show)))

(global-set-key (kbd "C-<f1>") 'cheatsheet-toggle)
#+END_SRC

*** Spellchecking
#+BEGIN_SRC emacs-lisp
;; Taken/inspired by https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-spell.el

(use-package ispell
  :if (not (bound-and-true-p disable-pkg-ispell))
  :config
  (setq ispell-program-name "aspell")
  (setq ispell-extra-args   '("--sug-mode=ultra"
                              "--lang=en_US"))

;; Save a new word to personal dictionary without asking
(setq ispell-silently-savep t))

(use-package flyspell
  :diminish
  :after ispell
  :init
  (progn
    ;; Below variables need to be set before `flyspell' is loaded.
    (setq flyspell-use-meta-tab nil)
    ;; Binding for `flyspell-auto-correct-previous-word'.
    (setq flyspell-auto-correct-binding (kbd "<S-f12>")))
  :hook ((prog-mode . flyspell-prog-mode)
           (org-mode . flyspell-mode)
           (text-mode . flyspell-mode))
)

(use-package flyspell-correct
  :after flyspell)

(defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "deutsch8") "english" "deutsch8")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

;; https://github.com/d12frosted/flyspell-correct
(use-package flyspell-correct-ivy
  :after flyspell-correct
  :bind
  (("<f12>" . flyspell-correct-at-point)
   ("<f8>" .   'fd-switch-dictionary)))
#+END_SRC


*** Writegood
#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :hook (text-mode org-mode)
  :diminish
  :config
  (--map (push it writegood-weasel-words) ;; some words form https://github.com/alhassy/emacs.d#cosmetics
         '("some" "simple" "simply" "easy" "often" "easily" "probably" "really"
           "clearly"               ;; Is the premise undeniably true?
           "experience shows"      ;; Whose? What kind? How does it do so?
           "may have"              ;; It may also have not!
           "it turns out that")))  ;; How does it turn out so?
#+END_SRC

*** Subword
In CamelCase treat all words as words.

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
(diminish  'subword-mode)
#+END_SRC

*** Syntax Checking
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish
  :init (global-flycheck-mode)
  :custom (flycheck-display-errors-delay .3))
#+END_SRC
*** Revert Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC
*** Server
#+BEGIN_SRC emacs-lisp
;; Start server mode
(server-start)
#+END_SRC


*** Files
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight f
  :custom
  ;; Auto revert
  (auto-revert-use-notify nil)
  (auto-revert-interval 3))
#+END_SRC

*** Auto complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish
  :config
  (global-company-mode 1)
  (setq ;; Only 2 letters required for completion to activate.
        company-minimum-prefix-length 2

        ;; Search other buffers for compleition candidates
        company-dabbrev-other-buffers t
        company-dabbrev-code-other-buffers t

        ;; Allow (lengthy) numbers to be eligible for completion.
        company-complete-number t

        ;; M-⟪num⟫ to select an option according to its number.
        company-show-numbers t

        ;; Edge of the completion list cycles around.
        company-selection-wrap-around t

        ;; Do not downcase completions by default.
        company-dabbrev-downcase nil

        ;; Even if I write something with the ‘wrong’ case,
        ;; provide the ‘correct’ casing.
        company-dabbrev-ignore-case t

        ;; Immediately activate completion.
        company-idle-delay 0))
#+END_SRC


*** Projectile
Currently unused, but still here as dependency for some features (see
Python section).
#+BEGIN_SRC emacs-lisp
   (use-package projectile
     :diminish
     :config
     (projectile-global-mode +1))

   (use-package counsel-projectile
     :diminish 
     :config
     (counsel-projectile-mode))
#+END_SRC


*** Block movement of regions
Move code regions up and down with ~C-S-<up>~ and ~C-S-<down>~ (similar to Eclipse).
#+BEGIN_SRC emacs-lisp
(use-package move-text
 ;; :init (move-text-default-bindings)
 :bind
 (("C-S-<up>" . move-text-up)
  ("C-S-<down>" . move-text-down))
)
#+END_SRC

*** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("C-@" . er/expand-region)
  ("C-=" . er/expand-region)
)
#+END_SRC

*** Movement
#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind
  ("C-c <up>" . windmove-up)
  ("C-c <down>" . windmove-down)
  ("C-c <left>" . windmove-left)
  ("C-c <right>" . windmove-right))

(use-package ace-window
  :init
  (progn
    (global-set-key (kbd "M-o") 'ace-window)
    (global-set-key (kbd "<f9>") 'ace-window))
  :config
    (set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)
    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window "Ace - Delete Window")
            (?c aw-swap-window "Ace - Swap Window")
            (?n aw-flip-window)
            (?v aw-split-window-vert "Ace - Split Vert Window")
            (?h aw-split-window-horz "Ace - Split Horz Window")
            (?m delete-other-windows "Ace - Maximize Window")
            (?g delete-other-windows)
            (?b balance-windows)))

    (defhydra hydra-window-size (:color red)
         "Windows size"
         ("h" shrink-window-horizontally "shrink horizontal")
         ("j" shrink-window "shrink vertical")
         ("k" enlarge-window "enlarge vertical")
         ("l" enlarge-window-horizontally "enlarge horizontal"))
    (defhydra hydra-window-frame (:color red)
         "Frame"
         ("f" make-frame "new frame")
         ("x" delete-frame "delete frame"))
    (defhydra hydra-window-scroll (:color red)
         "Scroll other window"
         ("n" joe-scroll-other-window "scroll")
         ("p" joe-scroll-other-window-down "scroll down"))
       (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
       (add-to-list 'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
       (add-to-list 'aw-dispatch-alist '(?\; hydra-window-frame/body) t)
     (ace-window-display-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; make C-a move to the beginning of the line on first press; on further presses go to beginning of code
;; same for C-e and end
(use-package mwim
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(use-package avy
  :bind
  (("C-z c" . avy-goto-char-timer)
   ("C-z l" . avy-goto-line))
  :custom
    (avy-timeout-seconds 0.3)
    (avy-style 'pre)
  :custom-face
    (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))));
#+END_SRC


*** Undo
Copied from https://github.com/alhassy/emacs.d
#+BEGIN_SRC emacs-lisp
;; Allow tree-semantics for undo operations.
(use-package undo-tree
  :diminish                       ;; Don't show an icon in the modeline
  :config
    ;; Always have it on
    (global-undo-tree-mode)

    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)

    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))

;; Execute (undo-tree-visualize) then navigate along the tree to witness
;; changes being made to your file live!
#+END_SRC


*** iedit, multiple cursors
See:
- https://emacs.stackexchange.com/questions/47821/iedit-vs-multiple-cursors

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :bind (("C-c i" . iedit-mode)))
#+END_SRC

** Modes

*** org mode

#+BEGIN_SRC emacs-lisp
;; ensure the correct org package is used for all the following
(straight-use-package 'org-plus-contrib)
#+END_SRC

**** org recur

#+BEGIN_SRC emacs-lisp
(defun marcfischer-init-org-recur-init()
  (setq ;; Make org and org-recur work nicely
        ;; Log time a task was set to Done.
        org-log-done (quote time)
        ;; Don't log the time a task was rescheduled or redeadlined.
        org-log-redeadline nil
        org-log-reschedule nil
        org-read-date-prefer-future 'time
        )
)

;; make org play well with org recur
;; Refresh org-agenda after rescheduling a task.
(defun marcfischer-init-org-agenda-refresh ()
  "Refresh all `org-agenda' buffers."
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (derived-mode-p 'org-agenda-mode)
        (org-agenda-maybe-redo)))))

(defun marcfischer-init-org-recur-config ()
  (defadvice org-schedule (after refresh-agenda activate)
  "Refresh org-agenda."
  (marcfischer-init-org-agenda-refresh))
)

(use-package org-recur
:after org
  :hook ((org-mode . org-recur-mode)
         (org-agenda-mode . org-recur-agenda-mode))
  :demand t
  :init
  (setq org-recur-finish-done t
        org-recur-finish-archive t)
  :config
  (define-key org-recur-mode-map (kbd "C-c d") 'org-recur-finish)
  ;; Rebind the 'd' key in org-agenda (default: `org-agenda-day-view').
  (define-key org-recur-agenda-mode-map (kbd "d") 'org-recur-finish)
  (define-key org-recur-agenda-mode-map (kbd "C-c d") 'org-recur-finish))
#+END_SRC

**** org refile

#+BEGIN_SRC emacs-lisp
(defun marcfischer-init-org-refile-config()
  ;; refile setup
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)) ;; show two levels of headings
        org-refile-allow-creating-parent-nodes 'confirm        ;; allow to create new nodes
        org-refile-use-outline-path 'file                      ;; allow to file to top level of files
        org-outline-path-complete-in-steps nil                 ;; present all possilbe paths at once
        )
)
#+END_SRC

**** org babel

***** python
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][[Documentation]​]]

Use the following header arguments:
- ~:results {output, value}~: Value mode is the default (as with other languages). In value mode you can use the following subtypes:
  - ~raw~: value is inserted directly
  - ~pp~: value is pretty-printed by python using pprint.pformat(%s), then inserted
  - ~file~: value is interpreted as a filename to be interpolated when exporting; commonly used for graphics output.
- ~:return~: Value to return (only when result-type is value, and not in session mode; not commonly used). Default is None; in non-session mode use return() to return a value.
- ~:python~: Name of the command for executing Python code.
- ~:session [name]~: default is no session.
~:var data=data-table~: Variables can be passed into python from org-mode tables as scalars or lists. See the org-mode manual for more details.
~:exports {code, results, both, none}~: Standard babel option for what to export.


 #+BEGIN_SRC emacs-lisp
(defun marcfischer-init-org-babel-config()
  ;; enable python in org babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
)
 #+END_SRC

**** file sync

#+BEGIN_SRC emacs-lisp
;; Try to minimize org sync conflicts by autosaving (https://christiantietze.de/posts/2019/03/sync-emacs-org-files/)
;; redefine org-save-all-org-buffers without print statements
(defun marcfischer-init-org-save-all-org-buffers ()
  "Save all Org buffers without user confirmation."
  (interactive)
  (save-some-buffers t (lambda () (derived-mode-p 'org-mode)))
  (when (featurep 'org-id) (org-id-locations-save)))

(defun marcfischer-init-org-sync-config ()
  (add-hook 'auto-save-hook 'marcfischer-init-org-save-all-org-buffers) ;; enable autosaves
)
#+END_SRC

**** org noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
    :after org
    :config
    (setq org-noter-always-create-frame nil
          org-noter-insert-note-no-questions t
          org-noter-separate-notes-from-heading t
          org-noter-auto-save-last-location t))
#+END_SRC


**** setup org agenda
#+BEGIN_SRC emacs-lisp

(setq org-agenda-span 7 ;; show 7 days 
      org-agenda-start-on-weekday nil  ;; start from current day (rather than monday)
      org-agenda-start-day "-1d") ;; show 1 day beforet

;; add super aggenda 
(use-package org-super-agenda
  :after org
  :config
  (org-super-agenda-mode)

(setq org-agenda-custom-commands
      '(("c" "Super Agenda" agenda
         (org-super-agenda-mode)
         ((org-super-agenda-groups
           '(
             (:name "Today"
                    :time-grid t
                    :scheduled today)
             (:name "Overdue"
                    :scheduled past)
             )))
         (org-agenda nil "a")))))
#+END_SRC

#+RESULTS:
: t

**** org zotxt
#+BEGIN_SRC emacs-lisp
(use-package org-zotxt
  :straight zotxt
  :diminish
  :after org
  :init (add-hook 'org-mode-hook 'org-zotxt-mode)
)
#+END_SRC


**** org-ref (with zotero integration)

#+BEGIN_SRC emacs-lisp

;; zotero pdf support
;; https://github.com/jkitchin/org-ref/blob/4f26ac56db785b4bff05e75ae7decc44be2ba89e/org-ref.org
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
	 (pdf-file (car (bibtex-completion-find-pdf key))))
    (if (file-exists-p pdf-file)
	(org-open-file pdf-file)
      (message "No PDF found for %s" key))))

(use-package org-ref
  :after org
  :config
  (setq reftex-default-bibliography '("~/org/bibliography/zotero.bib")
  org-ref-bibliography-notes "~/org/bibliography/notes.org"
  org-ref-default-bibliography '("~/org/bibliography/zotero.bib")
  org-ref-pdf-directory "~/org/bibliography/pdfs/"
  org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point
  org-ref-completion-library 'org-ref-ivy-cite)
)

#+END_SRC

# **** display agenda every morning

#   Display the emacs agenda every morning.
#   The Agenda is opened if emacs is focused for the first time that day after 8 am.

#   #+BEGIN_SRC emacs-lisp
# (setq marcfischer-init-open-agenda-every-day-last nil)
# (defun marcfischer-init-open-agenda-every-day ()
#   (interactive)
#   (let ((now (ts-now)))
#     (when (or (not marcfischer-init-open-agenda-every-day-last)
#               (and (ts>= now marcfischer-init-open-agenda-every-day-last)
#                    (>= (ts-hour now) 7)
#                    (or (> (ts-day now) (ts-day marcfischer-init-open-agenda-every-day-last))
#                        (> (ts-month now) (ts-month marcfischer-init-open-agenda-every-day-last))
#                        (> (ts-year now) (ts-year marcfischer-init-open-agenda-every-day-last)))))
#       (progn (org-agenda-list)
#              (switch-to-buffer "*Org Agenda*")
#              (delete-other-windows)
#              (setq marcfischer-init-open-agenda-every-day-last now))
#       )
#     )
#   )

# (defun marcfischer-init-org-display-agenda-config ()
#   (add-hook 'focus-in-hook 'marcfischer-init-open-agenda-every-day) 
# )
#   #+END_SRC


**** org capture

See:
- https://orgmode.org/manual/Capture-templates.html
- https://cestlaz.github.io/posts/using-emacs-23-capture-1/
- consider switching to https://github.com/progfolio/doct

#+BEGIN_SRC emacs-lisp
(defun marcfischer-init-org-capture-config()
  (global-set-key (kbd "C-c c") 'org-capture)
)

(setq org-capture-templates
'(("i" "in" entry (file "~/org/in.org") "* %?\n")
("t" "todo" entry (file "~/org/in.org") "* TODO %? %^g \n SCHEDULED: %^t \n")
("c" "cooking" entry (file "~/org/cooking.org") "* %?\n")
("r" "reading" entry (file "~/org/read.org") "* %?\n")
("m" "media [music, games, movies, recreational books] to consider" entry (file+headline "~/org/media.org" "To check out") "** %? %^g\n")
("o" "quote" entry (file "~/org/quotes.org") "* %^{quote}\n:PROPERTIES:\n:BY: %^{by}\n:FROM: %^{from}\n:END:" :empty-lines 1)


))
#+END_SRC

#+RESULTS:
| i | in   | entry | (file ~/org/in.org) | * %?          |
| t | todo | entry | (file ~/org/in.org) | * TODO %? %^g |

**** notes (org-journal; org-roam)

See:
- [[file:../../Dropbox/org/notes/20200216212922.org][How To Take Smart Notes With Org-mode]]
- https://org-roam.readthedocs.io/en/develop/
- https://github.com/bastibe/org-journal
- https://blog.jethro.dev/posts/introducing_org_roam/

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :after org
  :defer t
  :custom
  (org-journal-dir "~/org/notes/")
  (org-journal-date-format "%A, %d %B %Y"))

(use-package org-roam
      :after org
      :hook 
      ((org-mode . org-roam-mode)
       (after-init . org-roam--build-cache-async) ;; optional!
       )
      :straight (:host github :repo "jethrokuan/org-roam" :branch "master")
      :custom
      (org-roam-directory "~/org/notes")
      :bind
      ("C-c n l" . org-roam)
      ("C-c n t" . org-roam-today)
      ("C-c n f" . org-roam-find-file)
      ("C-c n i" . org-roam-insert)
      ("C-c n g" . org-roam-show-graph))
#+END_SRC


**** other

  #+BEGIN_SRC emacs-lisp
;; (defun org-toggle-link-display ()
;;   "Toggle the literal or descriptive display of links."
;;   (interactive)
;;   (if org-descriptive-links
;;       (progn (org-remove-from-invisibility-spec '(org-link))
;;          (org-restart-font-lock)
;;          (setq org-descriptive-links nil))
;;     (progn (add-to-invisibility-spec '(org-link))
;;        (org-restart-font-lock)
;;        (setq org-descriptive-links t))))
  #+END_SRC 


**** load everything

 #+BEGIN_SRC emacs-lisp
(use-package org
  :straight org-plus-contrib ;; load the full package with contrib code
  :init
  (setq org-agenda-files '("~/org/")
	      org-catch-invisible-edits 'show
	      org-confirm-babel-evaluate nil ;; run without confirmation
	      org-src-preserve-indentation t ;; preserve indentation at export
        org-image-actual-width nil
        org-agenda-window-setup 'only-window ;; make sure that agenda uses fullscreen
	      org-highlight-latex-and-related '(latex))
  (marcfischer-init-org-recur-init)

  :bind ("\C-c a" . org-agenda)
  :config

  ;; Allow the :ignore: to ignore headers in exporing
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  (marcfischer-init-org-recur-config)
  (marcfischer-init-org-refile-config)
  (marcfischer-init-org-babel-config)
  (marcfischer-init-org-sync-config)
  ;;(marcfischer-init-org-display-agenda-config)
  (marcfischer-init-org-capture-config)
)
  #+END_SRC

  #+RESULTS:
  : org-agenda


*** Integrate org-bibtex with org-roam (org-roam-bibtex)
#+BEGIN_SRC emacs-lisp
    (use-package org-roam-bibtex
  :after (org-roam org-ref)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions)))
  )
#+END_SRC


*** Ledger
#+BEGIN_SRC emacs-lisp
;; ledger mode
(use-package ledger-mode)
#+END_SRC

*** git
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

*** C++

#+BEGIN_SRC emacs-lisp
;; also use c++ mode for cuda files
(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
#+END_SRC


*** Eglot

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :diminish t
  :hook
  ;;(c-mode . eglot-ensure)
  ;;(c++-mode . eglot-ensure)
  (js-mode . eglot-ensure)
  (jsx-mode . eglot-ensure)
  (js-mode . eglot-ensure)
  (typescript-mode . eglot-ensure)
    ;;(python-mode . eglot-ensure)
)
#+END_SRC

**** TODO unify with python

*** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :diminish t)
#+END_SRC

*** SCSS

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :diminish t)
#+END_SRC

*** python
#+BEGIN_SRC emacs-lisp
(use-package f) ;; tools used in the following function
(use-package pyvenv)

(defvar conda-home "~/miniconda3" "Home dir used for python/conda.")
(defvar conda-home-envs (concat (file-name-as-directory conda-home) "envs") "Dir which includes defined virtualenvs.")

(defun set-conda-env (path)
  "Set the current venv to the conda enve of the given PATH."
  (setenv "WORKON_HOME" path)
  (pyvenv-workon ".")
  (message (concat "Setting virtualenv to " path))
  )

;; base on http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
(defun pyvenv-python-version-file ()
  "Automatically activates pyvenv if .python-version file exists."
  (interactive)
  (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
    (if python-version-directory
        (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
               (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
          (set-conda-env pyenv-current-version)
          ))))

(defun set-pyvenv ()
  "Set pyvenv matching the project name."
  (let ((project (downcase (projectile-project-name))))
    (if (member project (directory-files conda-home-envs)) ;; if we are in projectile and it matches a setup conda env -- use that
        (set-conda-env (concat (file-name-as-directory conda-home-envs) project))
      (pyvenv-python-version-file) ;; else see if there is a config file
      )))

(use-package pyvenv)

(use-package elpy
  :init (elpy-enable)
  :after (pyvenv projectile)
  :config
  (set-conda-env conda-home)
  (setq elpy-rpc-python-command "python")
  (setq python-shell-interpreter "python"
        python-shell-interpreter-args "-i"
        python-indent-offset 4)
  (setq elpy-rpc-backend "jedi")
  (add-hook 'elpy-mode-hook 'set-pyvenv))
#+END_SRC


*** pdf

Disable line numbers when in pdf mode.

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config (pdf-tools-install)
  :init (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))
#+END_SRC

*** latex

#+BEGIN_SRC emacs-lisp
(use-package flymake)

(use-package latex
  :straight auctex
  :after flymake
  :config
  (setq auto-mode-alist (cons '("\\.tex$" . latex-mode) auto-mode-alist)
        TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil
        TeX-electric-sub-and-superscript t   ; Automatically insert
                                             ; braces after sub- and
                                             ; superscripts in math
                                             ; mode
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        ispell-program-name "aspell"
        ispell-dictionary "english"
        LaTeX-section-hook
        '(LaTeX-section-heading
          LaTeX-section-title
          LaTeX-section-toc
          LaTeX-section-section
          LaTeX-section-label))


  (add-hook 'LaTeX-mode-hook 'flymake-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-buffer)

  ;; The following defadvice and defun make C-c C-s (insert section)
  ;; behave nicly.

  (defadvice LaTeX-section (after LaTeX-section-after activate)
    "After LaTeX-section delte the unecessarily inserted newline."
    (delete-char -1))

  (defun LaTeX-section-label()
    (let ((is-sec (<= level 4)))
      (progn
        (delete-char -1)
        (if is-sec (LaTeX-label name 'section))
        (insert " \%\n")
        (if is-sec (insert "\n"))
        )
      ))
  )

(use-package auctex-latexmk
  :after latex
  :config (auctex-latexmk-setup)
  )


;;   https://emacs.stackexchange.com/questions/21755/use-pdfview-as-default-auctex-pdf-viewer/21764
;;   (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
;;         TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
;;         TeX-source-correlate-start-server t)
;;   (add-hook 'TeX-after-compilation-finished-functions
;;             #'TeX-revert-document-buffer)

;;   ;; (add-hook 'after-save-hook
;;   ;;           (lambda ()
;;   ;;             (when (string= major-mode 'latex-mode)
;;   ;;               (TeX-run-latexmk
;;   ;;                "LaTex"
;;   ;;                (format "latexmk -synctex=1 -xelatex %s" (buffer-file-name))
;;   ;;                (file-name-base (buffer-file-name))))))

(use-package reftex                     ; TeX/BibTeX cross-reference management
  :after latex
  :init (add-hook 'LaTeX-mode-hook #'reftex-mode)
  :config
  (setq  reftex-plug-into-AUCTeX t)
  ;; Make cref work -- https://tex.stackexchange.com/questions/119253/cleveref-auctex-and-reftex-set-up/119273#119273
  (TeX-add-style-hook
   "cleveref"
   (lambda ()
     (if (boundp 'reftex-ref-style-alist)
         (add-to-list
          'reftex-ref-style-alist
          '("Cleveref" "cleveref"
            (("\\cref" ?c) ("\\Cref" ?C) ("\\cpageref" ?d) ("\\Cpageref" ?D)))))
     (reftex-ref-style-activate "Cleveref")
     (TeX-add-symbols
      '("cref" TeX-arg-ref)
      '("Cref" TeX-arg-ref)
      '("cpageref" TeX-arg-ref)
      '("Cpageref" TeX-arg-ref))))
  :diminish reftex-mode)
#+END_SRC



*** Lua

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode (("\\.lua\\'" . lua-mode))
  :config
  (add-hook 'lua-mode-hook #'company-mode))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . gfm-mode)
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc -t html5")t)
#+END_SRC

#+RESULTS:
: ((\.md\' . gfm-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.tex$ . latex-mode) (\.lua\' . lua-mode) (\.tex$ . latex-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.ts$ . typescript-mode) (\.cu\' . c++-mode) (/git-rebase-todo\' . git-rebase-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.ledger\' . ledger-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:3fr\|a\(?:rw\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:2c\|ng\|p\(?:eg\|[2cg]\)\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))



** Disable debugging
#+BEGIN_SRC emacs-lisp
;; Disable debugging
(setq debug-on-error nil)
(setq debug-on-quit nil)
#+END_SRC


** Say we are Done
#+BEGIN_SRC emacs-lisp
(message "init done")
#+END_SRC


* Test 

# #+BEGIN_SRC emacs-lisp
# (use-package org-caldav
#   :init
#   ;; This is the sync on close function; it also prompts for save after syncing so 
#   ;; no late changes get lost 
#   (defun org-caldav-sync-at-close ()
#     (org-caldav-sync)
#     (save-some-buffers))

#   ;; This is the delayed sync function; it waits until emacs has been idle for 
#   ;; "secs" seconds before syncing.  The delay is important because the caldav-sync
#   ;; can take five or ten seconds, which would be painful if it did that right at save.  
#   ;; This way it just waits until you've been idle for a while to avoid disturbing 
#   ;; the user.
#   (defvar org-caldav-sync-timer nil
#      "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
#   (defun org-caldav-sync-with-delay (secs)
#     (when org-caldav-sync-timer
#       (cancel-timer org-caldav-sync-timer))
#     (setq org-caldav-sync-timer
#       (run-with-idle-timer
#        (* 1 secs) nil 'org-caldav-sync)))

#   ;; Actual calendar configuration edit this to meet your specific needs
#   (setq org-caldav-urlf "https://nextcloud.bearcave.totallyawesome.at:10541/remote.php/dav/calendars/marc")
#       (setq org-caldav-calendars
#     '(
#       (:calendar-id "org"
#         :files ("~/org/calendar.org")
#         :inbox "~/org/calendar.org")))
#   (setq org-caldav-backup-file "~/org-caldav/org-caldav-backup.org")
#   (setq org-caldav-save-directory "~/org-caldav/")

#   :config
#   (setq org-icalendar-alarm-time 1)
#   ;; This makes sure to-do items as a category can show up on the calendar
#   (setq org-icalendar-include-todo t)
#   ;; This ensures all org "deadlines" show up, and show up as due dates
#   (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
#   ;; This ensures "scheduled" org items show up, and show up as start times
#   (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
#   ;; Add the delayed save hook with a five minute idle timer
#   (add-hook 'after-save-hook
#         (lambda ()
#           (when (eq major-mode 'org-mode)
#         (org-caldav-sync-with-delay 300))))
#   ;; Add the close emacs hook
#   (add-hook 'kill-emacs-hook 'org-caldav-sync-at-close))
# #+END_SRC

